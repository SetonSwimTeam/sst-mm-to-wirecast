#!/c/Users/SetonSwimTeam/AppData/Local/Programs/Python/Python39/python
# # ! d/usr/local/bin/python3

#############################################################################################
#############################################################################################
###
### display_specific_result_award
###  Given an results or award file generated by generate_wirecast_files.py for a particular
### event, copy that file over to a specific, unchanging filename for one wirecast template.
###
###  
#############################################################################################
#############################################################################################

import os, os.path
import re
import argparse
from pathlib import Path
import glob
import logging
import sys
from shutil import copyfile

###
### Import local modules that were split out for cleaner functionality
import sst_module_common as sst_common

    

#####################################################################################
#####################################################################################
##  M A I N
#####################################################################################
#####################################################################################
def process_main():
    #####################################################################################
    ## Parse out command line arguments
    #####################################################################################

    spacerelaynames = True
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('-i', '--inputdir',     dest='inputdir',        default="C:\\Users\\SetonSwimTeam\\Dropbox\\wirecast",   
                                                                        help="input directory for MM extract report")
    parser.add_argument('-o', '--outputdir',    dest='outputdir',       default="c:\\Users\\SetonSwimTeam\\Dropbox\\wirecast")  
    parser.add_argument('-O', '--outputfilename', dest='outputfilename', default="wirecast_awards.txt")  
    parser.add_argument('-p', '--filenameprefix', dest='filenameprefix', default="event_")      
    parser.add_argument('-s', '--filenamesuffix', dest='filenamesuffix', default="_AWARDS.txt")      
         
    parser.add_argument('-e', '--eventnum',   dest='event_num',          type=int,        
                                                                        help="The event number to process")
    parser.add_argument('-n', '--numresults',   dest='numresults',      type=int, default='14',        
                                                                        help="Number of results listed per event")
    parser.add_argument('-v', '--log',          dest='loglevel',        default='warning',              
                                                                        choices=['error', 'warning', 'info', 'debug'],            
                                                                        help="Set debugging level2")
    parser.add_argument('-h', '--help',         dest='help',            action='help', default=argparse.SUPPRESS, help="Tested with MM 8")

    args = parser.parse_args()

    event_num = f"{args.event_num:0>2}"

    inputfilename = f"{args.filenameprefix}{event_num}{args.filenamesuffix}"
    inputfile =f"{args.inputdir}/{inputfilename}"

    output_dir = args.outputdir


    ## The outputdir string MUST have a trailing slash.  Check string and add it if necesssary
    if output_dir[-1] != '/':
        output_dir = f"{output_dir}/"

    outputfilename = f"{output_dir}/{args.outputfilename}"
        
    ## Determine logging logleve
    loglevel = logging.DEBUG
    if args.loglevel == "debug":
        loglevel = logging.DEBUG
    elif args.loglevel == "info":
        loglevel = logging.INFO
    elif args.loglevel == "warning":
        loglevel = logging.WARNING
    elif args.loglevel == "error":
        loglevel = logging.ERROR

    #logging.basicConfig(flogging.DEBUGilename='example.log', filemode='w', level=logging.DEBUG) 
    # logging.basicConfig( format='%(levelname)s:%(message)s', level=logging.INFO)
    logging.basicConfig( format='%(message)s', level=loglevel)

    #####################################################################################
    ## Verify the directories and input file exists
    #####################################################################################
    error_msg = sst_common.verify_dirs_files( args.inputdir, inputfilename,  args.outputdir )
    if not error_msg == "":
        logging.error(f"Directory and/or input file error:\n{error_msg}")
        sys.exit(3)

    logargs = f"{Path(__file__).stem}  \n" + \
              f"\n   Params: \n" + \
              f"\tInputFile \t\t{inputfile} \n" + \
              f"\tOutputFileName\t\t{outputfilename} \n" + \
              f"\tEvent Number\t\t{event_num} \n" + \
              f"\tLog Level \t\t{args.loglevel}\n"
    logging.warning( logargs )

#####################################################################################
## Copy specific Event file to wirecast output file
#####################################################################################
    try:
        copyfile(inputfile, outputfilename)
        logging.warning( f"AWARDS: Event {event_num} successfully copied file {inputfilename} to {outputfilename}" )
    except Exception as e:
        logging.error( f"ERROR: file {inputfilename} not copied.  Error {e}")

#####################################################################################
#####################################################################################
##  M A I N
#####################################################################################
#####################################################################################
if __name__ == "__main__":
    process_main()
